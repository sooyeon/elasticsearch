package com.meltwater.caesar.highlight;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import org.apache.log4j.Logger;
import org.apache.lucene.analysis.TokenStream;
import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
import org.apache.lucene.analysis.tokenattributes.OffsetAttribute;
import org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl;
import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;
import org.apache.lucene.index.IndexReader;
import org.apache.lucene.index.TermPositionVector;
import org.apache.lucene.search.highlight.Encoder;
import org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder;
import org.apache.lucene.search.vectorhighlight.FieldFragList;
import org.apache.lucene.search.vectorhighlight.FieldPhraseList;
import org.apache.lucene.search.vectorhighlight.FieldFragList.WeightedFragInfo;
import org.apache.lucene.util.ArrayUtil;
import org.elasticsearch.search.highlight.HighlightPhase;

public class PositionGapFragmentsBuilder extends BaseFragmentsBuilder
{
    private static final Logger log = Logger.getLogger(PositionGapFragmentsBuilder.class);
    private static final String[] EMPTY_LIST = new String[0];
    private List<String> terms;

    public PositionGapFragmentsBuilder()
    {
        super(new String[] {"<B>"}, new String[] {"</B>"});
    }

    /**
     * Assumes the FieldFragList was generated by the
     * org.apache.lucene.search.vectorhighlight.TermFragListBuilder
     */
    @Override
    public String[] createFragments(IndexReader reader, int docId, String fieldName,
            FieldFragList ffl, int maxNumFragments, String[] preTags, String[] postTags,
            Encoder encoder) throws IOException
    {
        terms = new ArrayList<String>();
        if (ffl.getFragInfos().size() == 0)
            return EMPTY_LIST;

        TreeMap<OffsetAttribute, FieldFragList.WeightedFragInfo> offset2Boost = new TreeMap<OffsetAttribute, FieldFragList.WeightedFragInfo>(
                new Comparator<OffsetAttribute>() {
                    @Override
                    public int compare(OffsetAttribute o1, OffsetAttribute o2)
                    {
                        if (o2 == null)
                            return 1;
                        if (o1 == null)
                            return -1;
                        int diff = o1.startOffset() - o2.startOffset();
                        if (diff == 0)
                            diff = o1.endOffset() - o2.endOffset();
                        return diff;
                    }
                    
                });
        for (FieldFragList.WeightedFragInfo wfi : ffl.getFragInfos()) {
            for (FieldFragList.WeightedFragInfo.SubInfo si : wfi.getSubInfos()) {
                for (FieldPhraseList.WeightedPhraseInfo.Toffs t : si.getTermsOffsets()) {
                    OffsetAttribute oa = new OffsetAttributeImpl();
                    oa.setOffset(t.getStartOffset(), t.getEndOffset());
                    offset2Boost.put(oa, wfi);
                }
            }
        }


        fillHitwords(reader, docId, fieldName, offset2Boost);
        if (!HighlightPhase.highlight(fieldName)) {
            // simply return hitwords
            // no snippet generation is necessary for non-content fields
            return EMPTY_LIST;
        }

        String snippetFieldName = null;
        if (fieldName.contains("title"))
            snippetFieldName = "title.snippet";
        else if (fieldName.contains("ingress"))
            snippetFieldName = "ingress.snippet";
        else if (fieldName.contains("content"))
            snippetFieldName = "content.snippet";

        TermPositionVector vector = (TermPositionVector) reader.getTermFreqVector(docId,
                snippetFieldName);
        TokenStream stream = MultiFieldTermPositionVectorTokenSource.getTokenStream(vector, false);
        CharTermAttribute termAtt = stream.addAttribute(CharTermAttribute.class);
        PositionIncrementAttribute positionAtt = stream
                .addAttribute(PositionIncrementAttribute.class);
        OffsetAttribute offsetAtt = stream.addAttribute(OffsetAttribute.class);

        final Map<String, Float> snippet2Boost = new HashMap<String, Float>();
        StringBuilder sb = new StringBuilder();
        float netBoost = 0f;
        int lastPositionIncrement = 0;
        while (stream.incrementToken()) {
            if (positionAtt.getPositionIncrement() - lastPositionIncrement > 1000) {
                if (netBoost > 0f)
                    snippet2Boost.put(mergeTags(sb.toString().trim(), this.preTags[0], this.postTags[0]), Float.valueOf(netBoost));
                sb = new StringBuilder();
                netBoost = 0f;
            }
            lastPositionIncrement = positionAtt.getPositionIncrement();

            String term = termAtt.toString();
            // term is a match word
            // since some fields use different tokenizers than the fields used for
            // fragment generation, the offset condition must be relaxed
            FieldFragList.WeightedFragInfo wfi = offset2Boost.get(offsetAtt);
            if (wfi == null) wfi = getRelaxedOffsetFrag(offset2Boost, offset2Boost.ceilingKey(offsetAtt), offsetAtt);
            if (wfi == null) wfi = getRelaxedOffsetFrag(offset2Boost, offset2Boost.floorKey(offsetAtt), offsetAtt);
            if (wfi != null) {
                String pretag = this.getPreTag(this.preTags, wfi.getSubInfos().get(0).getSeqnum());
                String posttag = this.getPostTag(this.postTags, wfi.getSubInfos().get(0).getSeqnum());
                term = pretag + term + posttag;
                netBoost += wfi.getTotalBoost();
            }
            // TODO account for the fact that there maybe more than one whitespace
            sb.append(term).append(' ');
        }
        if (netBoost > 0f)
            snippet2Boost.put(mergeTags(sb.toString().trim(), this.preTags[0], this.postTags[0]), Float.valueOf(netBoost));
        String[] snippets = snippet2Boost.keySet().toArray(new String[0]);
        ArrayUtil.mergeSort(snippets, new Comparator<String>()
        {
            public int compare(String s1, String s2)
            {
                int compare = snippet2Boost.get(s2).compareTo(snippet2Boost.get(s1));
                if (compare == 0)
                    compare = s1.compareToIgnoreCase(s2);
                return compare;
            }
        });

        if (log.isDebugEnabled()) {
            for (String snippet : snippets)
                log.debug(snippet);
        }

        int toIndex = maxNumFragments > snippets.length ? snippets.length : maxNumFragments;
        return Arrays.copyOfRange(snippets, 0, toIndex);
    }

    @Override
    public List<WeightedFragInfo> getWeightedFragInfoList(List<WeightedFragInfo> src)
    {
        return src;
    }

    private FieldFragList.WeightedFragInfo getRelaxedOffsetFrag(
            TreeMap<OffsetAttribute, FieldFragList.WeightedFragInfo> offset2Boost,
            OffsetAttribute base, OffsetAttribute o)
    {
        if (base == null || o == null)
            return null;
        if (base.endOffset() < o.startOffset() || base.startOffset() > o.endOffset())
            return null;
        return offset2Boost.get(base);
    }

    private String mergeTags(String s, String pretag, String posttag)
    {
        String result = s.replaceAll(posttag + "\\w+" + pretag, " ");
        result = result.replaceAll(posttag + pretag, "");
        return result;
    }

    private void fillHitwords(IndexReader reader, int docId, String fieldName,
            TreeMap<OffsetAttribute, FieldFragList.WeightedFragInfo> offset2Boost) throws IOException
    {
        TermPositionVector vector = (TermPositionVector) reader.getTermFreqVector(docId,
                fieldName);
        TokenStream stream = MultiFieldTermPositionVectorTokenSource.getTokenStream(vector, false);
        CharTermAttribute termAtt = stream.addAttribute(CharTermAttribute.class);
        OffsetAttribute offsetAtt = stream.addAttribute(OffsetAttribute.class);
        stream.incrementToken();

        for (Map.Entry<OffsetAttribute, FieldFragList.WeightedFragInfo> me : offset2Boost.entrySet()) {
            String hitword = "";
            FieldFragList.WeightedFragInfo wfi = getRelaxedOffsetFrag(offset2Boost, me.getKey(), offsetAtt);
            while(wfi == null && stream.incrementToken())
                wfi = getRelaxedOffsetFrag(offset2Boost, me.getKey(), offsetAtt);

            if (wfi != null) {
                hitword += termAtt.toString();
                while (stream.incrementToken()) {
                    wfi = getRelaxedOffsetFrag(offset2Boost, me.getKey(), offsetAtt);
                    if (wfi != null)
                        hitword += " " + termAtt.toString();
                    else
                        break;
                }
                terms.add(hitword);
            }
        }
    }

    public List<String> getTerms()
    {
        return terms;
    }
}
